{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Pipe, NgModule } from '@angular/core';\nimport { sum, isNumberFinite, toDecimal, isNil } from 'ng-zorro-antd/core/util';\nimport * as i1 from '@angular/platform-browser';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzAggregatePipe {\n  transform(value, method) {\n    if (!Array.isArray(value)) {\n      return value;\n    }\n    if (value.length === 0) {\n      return undefined;\n    }\n    switch (method) {\n      case 'sum':\n        return sum(value);\n      case 'avg':\n        return sum(value) / value.length;\n      case 'max':\n        return Math.max(...value);\n      case 'min':\n        return Math.min(...value);\n      default:\n        throw Error(`Invalid Pipe Arguments: Aggregate pipe doesn't support this type`);\n    }\n  }\n}\nNzAggregatePipe.ɵfac = function NzAggregatePipe_Factory(t) {\n  return new (t || NzAggregatePipe)();\n};\nNzAggregatePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"nzAggregate\",\n  type: NzAggregatePipe,\n  pure: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzAggregatePipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzAggregate'\n    }]\n  }], null, null);\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzBytesPipe {\n  transform(input, decimal = 0, from = 'B', to) {\n    if (!(isNumberFinite(input) && isNumberFinite(decimal) && decimal % 1 === 0 && decimal >= 0)) {\n      return input;\n    }\n    let bytes = input;\n    let unit = from;\n    while (unit !== 'B') {\n      bytes *= 1024;\n      unit = NzBytesPipe.formats[unit].prev;\n    }\n    if (to) {\n      const format = NzBytesPipe.formats[to];\n      const result = toDecimal(NzBytesPipe.calculateResult(format, bytes), decimal);\n      return NzBytesPipe.formatResult(result, to);\n    }\n    for (const key in NzBytesPipe.formats) {\n      if (NzBytesPipe.formats.hasOwnProperty(key)) {\n        const format = NzBytesPipe.formats[key];\n        if (bytes < format.max) {\n          const result = toDecimal(NzBytesPipe.calculateResult(format, bytes), decimal);\n          return NzBytesPipe.formatResult(result, key);\n        }\n      }\n    }\n  }\n  static formatResult(result, unit) {\n    return `${result} ${unit}`;\n  }\n  static calculateResult(format, bytes) {\n    const prev = format.prev ? NzBytesPipe.formats[format.prev] : undefined;\n    return prev ? bytes / prev.max : bytes;\n  }\n}\nNzBytesPipe.formats = {\n  B: {\n    max: 1024\n  },\n  kB: {\n    max: Math.pow(1024, 2),\n    prev: 'B'\n  },\n  KB: {\n    max: Math.pow(1024, 2),\n    prev: 'B'\n  },\n  MB: {\n    max: Math.pow(1024, 3),\n    prev: 'kB'\n  },\n  GB: {\n    max: Math.pow(1024, 4),\n    prev: 'MB'\n  },\n  TB: {\n    max: Number.MAX_SAFE_INTEGER,\n    prev: 'GB'\n  }\n};\nNzBytesPipe.ɵfac = function NzBytesPipe_Factory(t) {\n  return new (t || NzBytesPipe)();\n};\nNzBytesPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"nzBytes\",\n  type: NzBytesPipe,\n  pure: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzBytesPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzBytes'\n    }]\n  }], null, null);\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzToCssUnitPipe {\n  transform(value, defaultUnit = 'px') {\n    const absoluteLengthUnit = ['cm', 'mm', 'Q', 'in', 'pc', 'pt', 'px'];\n    const relativeLengthUnit = ['em', 'ex', 'ch', 'rem', '1h', 'vw', 'vh', 'vmin', 'vmax'];\n    const percentagesUnit = ['%'];\n    const listOfUnit = [...absoluteLengthUnit, ...relativeLengthUnit, ...percentagesUnit];\n    let unit = 'px';\n    if (listOfUnit.some(u => u === defaultUnit)) {\n      unit = defaultUnit;\n    }\n    return typeof value === 'number' ? `${value}${unit}` : `${value}`;\n  }\n}\nNzToCssUnitPipe.ɵfac = function NzToCssUnitPipe_Factory(t) {\n  return new (t || NzToCssUnitPipe)();\n};\nNzToCssUnitPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"nzToCssUnit\",\n  type: NzToCssUnitPipe,\n  pure: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzToCssUnitPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzToCssUnit'\n    }]\n  }], null, null);\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzEllipsisPipe {\n  transform(value, length, suffix = '') {\n    if (typeof value !== 'string') {\n      return value;\n    }\n    const len = typeof length === 'undefined' ? value.length : length;\n    if (value.length <= len) {\n      return value;\n    }\n    return value.substring(0, len) + suffix;\n  }\n}\nNzEllipsisPipe.ɵfac = function NzEllipsisPipe_Factory(t) {\n  return new (t || NzEllipsisPipe)();\n};\nNzEllipsisPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"nzEllipsis\",\n  type: NzEllipsisPipe,\n  pure: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzEllipsisPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzEllipsis'\n    }]\n  }], null, null);\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzSafeNullPipe {\n  transform(value, replace = '') {\n    if (isNil(value)) {\n      return replace;\n    }\n    return value;\n  }\n}\nNzSafeNullPipe.ɵfac = function NzSafeNullPipe_Factory(t) {\n  return new (t || NzSafeNullPipe)();\n};\nNzSafeNullPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"nzSafeNull\",\n  type: NzSafeNullPipe,\n  pure: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzSafeNullPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzSafeNull'\n    }]\n  }], null, null);\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzSanitizerPipe {\n  constructor(sanitizer) {\n    this.sanitizer = sanitizer;\n  }\n  transform(value, type = 'html') {\n    switch (type) {\n      case 'html':\n        return this.sanitizer.bypassSecurityTrustHtml(value);\n      case 'style':\n        return this.sanitizer.bypassSecurityTrustStyle(value);\n      case 'url':\n        return this.sanitizer.bypassSecurityTrustUrl(value);\n      case 'resourceUrl':\n        return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n      default:\n        throw new Error(`Invalid safe type specified`);\n    }\n  }\n}\nNzSanitizerPipe.ɵfac = function NzSanitizerPipe_Factory(t) {\n  return new (t || NzSanitizerPipe)(i0.ɵɵdirectiveInject(i1.DomSanitizer, 16));\n};\nNzSanitizerPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"nzSanitizer\",\n  type: NzSanitizerPipe,\n  pure: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzSanitizerPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzSanitizer'\n    }]\n  }], function () {\n    return [{\n      type: i1.DomSanitizer\n    }];\n  }, null);\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTrimPipe {\n  // TODO(chensimeng) trimEnd, trimStart\n  transform(text) {\n    return text.trim();\n  }\n}\nNzTrimPipe.ɵfac = function NzTrimPipe_Factory(t) {\n  return new (t || NzTrimPipe)();\n};\nNzTrimPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"nzTrim\",\n  type: NzTrimPipe,\n  pure: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTrimPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzTrim'\n    }]\n  }], null, null);\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst pipes = [NzToCssUnitPipe, NzSafeNullPipe, NzSanitizerPipe, NzTrimPipe, NzBytesPipe, NzAggregatePipe, NzEllipsisPipe];\nclass NzPipesModule {}\nNzPipesModule.ɵfac = function NzPipesModule_Factory(t) {\n  return new (t || NzPipesModule)();\n};\nNzPipesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NzPipesModule\n});\nNzPipesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzPipesModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [pipes],\n      declarations: [pipes]\n    }]\n  }], null, null);\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzAggregatePipe, NzBytesPipe, NzEllipsisPipe, NzPipesModule, NzSafeNullPipe, NzSanitizerPipe, NzToCssUnitPipe, NzTrimPipe };","map":{"version":3,"names":["CommonModule","i0","Pipe","NgModule","sum","isNumberFinite","toDecimal","isNil","i1","NzAggregatePipe","transform","value","method","Array","isArray","length","undefined","Math","max","min","Error","ɵfac","ɵpipe","type","args","name","NzBytesPipe","input","decimal","from","to","bytes","unit","formats","prev","format","result","calculateResult","formatResult","key","hasOwnProperty","B","kB","pow","KB","MB","GB","TB","Number","MAX_SAFE_INTEGER","NzToCssUnitPipe","defaultUnit","absoluteLengthUnit","relativeLengthUnit","percentagesUnit","listOfUnit","some","u","NzEllipsisPipe","suffix","len","substring","NzSafeNullPipe","replace","NzSanitizerPipe","constructor","sanitizer","bypassSecurityTrustHtml","bypassSecurityTrustStyle","bypassSecurityTrustUrl","bypassSecurityTrustResourceUrl","DomSanitizer","NzTrimPipe","text","trim","pipes","NzPipesModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["/Users/SSL/Desktop/GitHub-File/aep.GitHub.io/node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-pipes.mjs"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Pipe, NgModule } from '@angular/core';\nimport { sum, isNumberFinite, toDecimal, isNil } from 'ng-zorro-antd/core/util';\nimport * as i1 from '@angular/platform-browser';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzAggregatePipe {\n    transform(value, method) {\n        if (!Array.isArray(value)) {\n            return value;\n        }\n        if (value.length === 0) {\n            return undefined;\n        }\n        switch (method) {\n            case 'sum':\n                return sum(value);\n            case 'avg':\n                return sum(value) / value.length;\n            case 'max':\n                return Math.max(...value);\n            case 'min':\n                return Math.min(...value);\n            default:\n                throw Error(`Invalid Pipe Arguments: Aggregate pipe doesn't support this type`);\n        }\n    }\n}\nNzAggregatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NzAggregatePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\nNzAggregatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"15.0.4\", ngImport: i0, type: NzAggregatePipe, name: \"nzAggregate\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NzAggregatePipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'nzAggregate'\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzBytesPipe {\n    transform(input, decimal = 0, from = 'B', to) {\n        if (!(isNumberFinite(input) && isNumberFinite(decimal) && decimal % 1 === 0 && decimal >= 0)) {\n            return input;\n        }\n        let bytes = input;\n        let unit = from;\n        while (unit !== 'B') {\n            bytes *= 1024;\n            unit = NzBytesPipe.formats[unit].prev;\n        }\n        if (to) {\n            const format = NzBytesPipe.formats[to];\n            const result = toDecimal(NzBytesPipe.calculateResult(format, bytes), decimal);\n            return NzBytesPipe.formatResult(result, to);\n        }\n        for (const key in NzBytesPipe.formats) {\n            if (NzBytesPipe.formats.hasOwnProperty(key)) {\n                const format = NzBytesPipe.formats[key];\n                if (bytes < format.max) {\n                    const result = toDecimal(NzBytesPipe.calculateResult(format, bytes), decimal);\n                    return NzBytesPipe.formatResult(result, key);\n                }\n            }\n        }\n    }\n    static formatResult(result, unit) {\n        return `${result} ${unit}`;\n    }\n    static calculateResult(format, bytes) {\n        const prev = format.prev ? NzBytesPipe.formats[format.prev] : undefined;\n        return prev ? bytes / prev.max : bytes;\n    }\n}\nNzBytesPipe.formats = {\n    B: { max: 1024 },\n    kB: { max: Math.pow(1024, 2), prev: 'B' },\n    KB: { max: Math.pow(1024, 2), prev: 'B' },\n    MB: { max: Math.pow(1024, 3), prev: 'kB' },\n    GB: { max: Math.pow(1024, 4), prev: 'MB' },\n    TB: { max: Number.MAX_SAFE_INTEGER, prev: 'GB' }\n};\nNzBytesPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NzBytesPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\nNzBytesPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"15.0.4\", ngImport: i0, type: NzBytesPipe, name: \"nzBytes\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NzBytesPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'nzBytes'\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzToCssUnitPipe {\n    transform(value, defaultUnit = 'px') {\n        const absoluteLengthUnit = ['cm', 'mm', 'Q', 'in', 'pc', 'pt', 'px'];\n        const relativeLengthUnit = ['em', 'ex', 'ch', 'rem', '1h', 'vw', 'vh', 'vmin', 'vmax'];\n        const percentagesUnit = ['%'];\n        const listOfUnit = [...absoluteLengthUnit, ...relativeLengthUnit, ...percentagesUnit];\n        let unit = 'px';\n        if (listOfUnit.some(u => u === defaultUnit)) {\n            unit = defaultUnit;\n        }\n        return typeof value === 'number' ? `${value}${unit}` : `${value}`;\n    }\n}\nNzToCssUnitPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NzToCssUnitPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\nNzToCssUnitPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"15.0.4\", ngImport: i0, type: NzToCssUnitPipe, name: \"nzToCssUnit\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NzToCssUnitPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'nzToCssUnit'\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzEllipsisPipe {\n    transform(value, length, suffix = '') {\n        if (typeof value !== 'string') {\n            return value;\n        }\n        const len = typeof length === 'undefined' ? value.length : length;\n        if (value.length <= len) {\n            return value;\n        }\n        return value.substring(0, len) + suffix;\n    }\n}\nNzEllipsisPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NzEllipsisPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\nNzEllipsisPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"15.0.4\", ngImport: i0, type: NzEllipsisPipe, name: \"nzEllipsis\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NzEllipsisPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'nzEllipsis'\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzSafeNullPipe {\n    transform(value, replace = '') {\n        if (isNil(value)) {\n            return replace;\n        }\n        return value;\n    }\n}\nNzSafeNullPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NzSafeNullPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\nNzSafeNullPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"15.0.4\", ngImport: i0, type: NzSafeNullPipe, name: \"nzSafeNull\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NzSafeNullPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'nzSafeNull'\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzSanitizerPipe {\n    constructor(sanitizer) {\n        this.sanitizer = sanitizer;\n    }\n    transform(value, type = 'html') {\n        switch (type) {\n            case 'html':\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n            case 'resourceUrl':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n            default:\n                throw new Error(`Invalid safe type specified`);\n        }\n    }\n}\nNzSanitizerPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NzSanitizerPipe, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Pipe });\nNzSanitizerPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"15.0.4\", ngImport: i0, type: NzSanitizerPipe, name: \"nzSanitizer\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NzSanitizerPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'nzSanitizer'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTrimPipe {\n    // TODO(chensimeng) trimEnd, trimStart\n    transform(text) {\n        return text.trim();\n    }\n}\nNzTrimPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NzTrimPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\nNzTrimPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"15.0.4\", ngImport: i0, type: NzTrimPipe, name: \"nzTrim\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NzTrimPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'nzTrim'\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst pipes = [\n    NzToCssUnitPipe,\n    NzSafeNullPipe,\n    NzSanitizerPipe,\n    NzTrimPipe,\n    NzBytesPipe,\n    NzAggregatePipe,\n    NzEllipsisPipe\n];\nclass NzPipesModule {\n}\nNzPipesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NzPipesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNzPipesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.4\", ngImport: i0, type: NzPipesModule, declarations: [NzToCssUnitPipe,\n        NzSafeNullPipe,\n        NzSanitizerPipe,\n        NzTrimPipe,\n        NzBytesPipe,\n        NzAggregatePipe,\n        NzEllipsisPipe], imports: [CommonModule], exports: [NzToCssUnitPipe,\n        NzSafeNullPipe,\n        NzSanitizerPipe,\n        NzTrimPipe,\n        NzBytesPipe,\n        NzAggregatePipe,\n        NzEllipsisPipe] });\nNzPipesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NzPipesModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NzPipesModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    exports: [pipes],\n                    declarations: [pipes]\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzAggregatePipe, NzBytesPipe, NzEllipsisPipe, NzPipesModule, NzSafeNullPipe, NzSanitizerPipe, NzToCssUnitPipe, NzTrimPipe };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}